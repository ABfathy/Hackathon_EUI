'use client'

import { useState, useEffect, useRef } from 'react'
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { useLanguage } from "@/context/language-context"
import { MapPin, Search, Check } from "lucide-react"

interface LocationSearchProps {
  placeholder: string
  value: string
  onChange: (value: string) => void
  onLocationSelect: (location: { address: string, latitude: number, longitude: number }) => void
  language?: 'en' | 'ar'
}

const translations = {
  en: {
    searchLocation: "Search for a location",
    confirmLocation: "Confirm Location",
    cancel: "Cancel",
    confirm: "Confirm",
    dragPinHint: "You can drag the marker to adjust the location",
    useThisLocation: "Use This Location"
  },
  ar: {
    searchLocation: "ابحث عن موقع",
    confirmLocation: "تأكيد الموقع",
    cancel: "إلغاء",
    confirm: "تأكيد",
    dragPinHint: "يمكنك سحب العلامة لضبط الموقع",
    useThisLocation: "استخدم هذا الموقع"
  }
}

export default function LocationSearch({ 
  placeholder, 
  value, 
  onChange, 
  onLocationSelect,
  language = 'en'
}: LocationSearchProps) {
  const { language: contextLanguage } = useLanguage()
  const lang = language || contextLanguage
  const t = translations[lang]
  
  const [predictions, setPredictions] = useState<google.maps.places.AutocompletePrediction[]>([])
  const [showPredictions, setShowPredictions] = useState(false)
  const [isMapOpen, setIsMapOpen] = useState(false)
  const [selectedPlace, setSelectedPlace] = useState<any>(null)
  const [map, setMap] = useState<google.maps.Map | null>(null)
  const [marker, setMarker] = useState<google.maps.Marker | null>(null)
  const autocompleteService = useRef<google.maps.places.AutocompleteService | null>(null)
  const placesService = useRef<google.maps.places.PlacesService | null>(null)
  const mapRef = useRef<HTMLDivElement>(null)
  
  // Initialize Google Maps services when the component mounts
  useEffect(() => {
    // Attempt to initialize services if Google Maps API is already loaded
    if (typeof window !== 'undefined' && window.google && window.google.maps) {
      initializeServices();
    }
    
    // Function to handle Google Maps API loading
    function handleGoogleMapsLoaded() {
      initializeServices();
    }
    
    // Initialize services when Google Maps is available
    function initializeServices() {
      try {
        if (!autocompleteService.current && window.google?.maps?.places) {
          autocompleteService.current = new window.google.maps.places.AutocompleteService();
          console.log('AutocompleteService initialized');
          
          // Create a dummy div for PlacesService
          const dummyElement = document.createElement('div');
          document.body.appendChild(dummyElement);
          placesService.current = new window.google.maps.places.PlacesService(dummyElement);
          console.log('PlacesService initialized');
        }
      } catch (error) {
        console.error('Error initializing Google Maps services:', error);
      }
    }
    
    // Listen for Google Maps API loaded event
    window.addEventListener('google-maps-loaded', handleGoogleMapsLoaded);
    
    // Cleanup
    return () => {
      window.removeEventListener('google-maps-loaded', handleGoogleMapsLoaded);
    };
  }, [])
  
  // Handle input change and get predictions
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value
    onChange(inputValue)
    
    if (inputValue.length > 1 && autocompleteService.current) {
      try {
        autocompleteService.current.getPlacePredictions(
          {
            input: inputValue,
            // Can add restrictions here if needed:
            // componentRestrictions: { country: 'eg' },
          },
          (predictions, status) => {
            if (status === google.maps.places.PlacesServiceStatus.OK && predictions) {
              setPredictions(predictions)
              setShowPredictions(true)
            } else {
              setPredictions([])
              setShowPredictions(false)
            }
          }
        )
      } catch (error) {
        console.error('Error getting place predictions:', error)
        setPredictions([])
        setShowPredictions(false)
      }
    } else {
      setPredictions([])
      setShowPredictions(false)
    }
  }
  
  // Handle selection from predictions
  const handleSelectPlace = (placeId: string, description: string) => {
    onChange(description)
    setShowPredictions(false)
    
    if (typeof window !== 'undefined' && window.google && window.google.maps) {
      try {
        // Create a PlacesService if we don't have one
        if (!placesService.current && document.createElement && mapRef.current) {
          // Use a hidden div for the PlacesService (it requires a DOM element)
          const attributionElement = document.createElement('div')
          attributionElement.style.display = 'none'
          document.body.appendChild(attributionElement)
          placesService.current = new window.google.maps.places.PlacesService(attributionElement)
        }
        
        // Get place details
        if (placesService.current) {
          placesService.current.getDetails(
            {
              placeId: placeId,
              fields: ['geometry', 'formatted_address', 'name']
            },
            (result, status) => {
              if (status === google.maps.places.PlacesServiceStatus.OK && result && result.geometry && result.geometry.location) {
                setSelectedPlace({
                  placeId,
                  name: result.name,
                  address: result.formatted_address || description,
                  location: {
                    lat: result.geometry.location.lat(),
                    lng: result.geometry.location.lng()
                  }
                })
                
                // Open the map with the selected location
                setIsMapOpen(true)
              } else {
                console.error('Error getting place details:', status)
              }
            }
          )
        }
      } catch (error) {
        console.error('Error in place selection:', error)
      }
    }
  }
  
  // Initialize map when the dialog opens
  useEffect(() => {
    if (!isMapOpen || !selectedPlace || !mapRef.current || !window.google || !window.google.maps) return
    
    try {
      // Create map
      const newMap = new window.google.maps.Map(mapRef.current, {
        center: selectedPlace.location,
        zoom: 16,
        mapTypeControl: false,
        streetViewControl: false,
        fullscreenControl: true
      })
      
      // Create marker
      const newMarker = new window.google.maps.Marker({
        position: selectedPlace.location,
        map: newMap,
        draggable: true,
        // Only add animation if available
        ...(window.google.maps.Animation && { animation: window.google.maps.Animation.DROP }),
        title: selectedPlace.name,
      })
      
      // Add event listener for marker drag end
      newMarker.addListener('dragend', () => {
        const position = newMarker.getPosition()
        if (position) {
          setSelectedPlace({
            ...selectedPlace,
            location: {
              lat: position.lat(),
              lng: position.lng()
            }
          })
        }
      })
      
      setMap(newMap)
      setMarker(newMarker)
    } catch (error) {
      console.error('Error initializing map:', error)
    }
    
    // Cleanup function
    return () => {
      if (newMarker) newMarker.setMap(null)
    }
  }, [isMapOpen, selectedPlace])
  
  // Handle confirm location
  const handleConfirmLocation = () => {
    if (selectedPlace) {
      onLocationSelect({
        address: selectedPlace.address,
        latitude: selectedPlace.location.lat,
        longitude: selectedPlace.location.lng
      })
      setIsMapOpen(false)
    }
  }
  
  return (
    <div className="relative w-full">
      <div className="flex">
        <Input
          placeholder={placeholder}
          value={value}
          onChange={handleInputChange}
          onFocus={() => setShowPredictions(true)}
          className="w-full"
        />
        <Button 
          type="button" 
          variant="outline" 
          onClick={() => value && setIsMapOpen(true)}
          className="ml-2"
        >
          <MapPin className="h-4 w-4" />
        </Button>
      </div>
      
      {/* Predictions dropdown */}
      {showPredictions && predictions.length > 0 && (
        <div className="absolute z-10 mt-1 w-full bg-white dark:bg-gray-800 shadow-lg rounded-md border border-gray-200 dark:border-gray-700 max-h-60 overflow-auto">
          {predictions.map((prediction) => (
            <div
              key={prediction.place_id}
              className="px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer"
              onClick={() => handleSelectPlace(prediction.place_id, prediction.description)}
            >
              <div className="flex items-start gap-2">
                <MapPin className="h-4 w-4 mt-1 flex-shrink-0" />
                <span>{prediction.description}</span>
              </div>
            </div>
          ))}
        </div>
      )}
      
      {/* Map confirmation dialog */}
      <Dialog open={isMapOpen} onOpenChange={setIsMapOpen}>
        <DialogContent className="sm:max-w-[600px] p-0">
          <DialogHeader className="p-4 pb-0">
            <DialogTitle>{t.confirmLocation}</DialogTitle>
          </DialogHeader>
          <div className="px-4">
            <p className="text-sm text-muted-foreground mb-2">
              {selectedPlace?.address}
            </p>
            <p className="text-xs text-muted-foreground">
              {t.dragPinHint}
            </p>
          </div>
          <div 
            ref={mapRef} 
            className="w-full h-[300px] mt-4"
          />
          <DialogFooter className="p-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => setIsMapOpen(false)}
            >
              {t.cancel}
            </Button>
            <Button 
              type="button" 
              onClick={handleConfirmLocation}
              className="gap-2"
            >
              <Check className="h-4 w-4" />
              {t.useThisLocation}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
