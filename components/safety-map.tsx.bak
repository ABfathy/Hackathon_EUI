'use client'

import { useEffect, useState, useRef } from 'react'
import { useLanguage } from '@/context/language-context'
import { AlertTriangle, Info, CheckCircle } from 'lucide-react'
import GoogleMapsApiLoader from './google-maps-api-loader'

// Define a type for the Google Maps API
type GoogleMapsType = {
  maps: {
    Map: new (element: HTMLElement, options: any) => any;
    Marker: new (options: any) => any;
    LatLng: new (lat: number, lng: number) => any;
    InfoWindow: new (options: any) => any;
    Circle: new (options: any) => any;
    Animation: {
      DROP: number;
      BOUNCE: number;
    };
    SymbolPath: {
      CIRCLE: number;
    };
  };
};

// Simple translations for the map component
const translations = {
  en: {
    loading: "Loading map data...",
    noAlerts: "No alerts in this area"
  },
  ar: {
    loading: "جاري تحميل بيانات الخريطة...",
    noAlerts: "لا توجد تنبيهات في هذه المنطقة"
  }
}

interface SafetyMapProps {
  alerts?: any[]
  userLocation?: { latitude: number | null; longitude: number | null }
  radius?: string
  loading?: boolean
}

export default function SafetyMap({ 
  alerts = [], 
  userLocation = { latitude: null, longitude: null },
  radius = '2',
  loading = false
}: SafetyMapProps) {
  const { language } = useLanguage()
  const t = translations[language]
  
  const mapRef = useRef<HTMLDivElement>(null)
  const [map, setMap] = useState<any>(null)
  const [markers, setMarkers] = useState<any[]>([])
  const [mapReady, setMapReady] = useState(false)
  
  // Initialize the map when the component mounts and Google Maps is loaded
  const initializeMap = () => {
    if (!mapRef.current || map) return
    
    try {
      // Default center (Cairo)
      const defaultCenter = { lat: 30.0444, lng: 31.2357 }
      
      // Use user location if available
      const center = userLocation.latitude && userLocation.longitude 
        ? { lat: userLocation.latitude, lng: userLocation.longitude }
        : defaultCenter
      
      const mapOptions = {
        center,
        zoom: 13,
        mapTypeId: 'roadmap',
        mapTypeControl: false,
        streetViewControl: false,
        fullscreenControl: true,
        gestureHandling: 'cooperative'
      }
      
      const newMap = new google.maps.Map(mapRef.current, mapOptions)
      
      // Add a circular overlay to show the radius around the user's location
      if (userLocation.latitude && userLocation.longitude) {
        const radiusInMeters = parseInt(radius) * 1000;
        try {
          const circle = new google.maps.Circle({
            strokeColor: '#10b981',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#10b981',
            fillOpacity: 0.1,
            map: newMap,
            center: { lat: userLocation.latitude, lng: userLocation.longitude },
            radius: radiusInMeters,
          });
        } catch (error) {
          console.error('Error creating circle:', error)
        }
        
        // Add a marker for the user's location
        try {
          const userMarker = new google.maps.Marker({
            position: { lat: userLocation.latitude, lng: userLocation.longitude },
            map: newMap,
            title: "Your location",
            icon: {
              path: google.maps.SymbolPath.CIRCLE,
              fillColor: '#3b82f6',
              fillOpacity: 0.9,
              strokeWeight: 2,
              strokeColor: '#ffffff',
              scale: 8
            }
          });
        } catch (error) {
          console.error('Error creating user marker:', error)
        }
      }
      
      setMap(newMap)
      setMapReady(true)
      
      // Update markers once the map is initialized
      updateMarkers(newMap)
    } catch (error) {
      console.error('Error initializing map:', error)
    }
  }
  
  // Update markers when alerts or map changes
  const updateMarkers = (currentMap: any) => {
    if (!currentMap) return
    
    try {
      // Clear existing markers
      markers.forEach(marker => {
        if (marker) marker.setMap(null)
      })
      
      const newMarkers: any[] = []
      
      // Add markers for each alert
      alerts.forEach(alert => {
        try {
          const incident = alert.incident
          if (!incident.latitude || !incident.longitude) return
          
          // Determine marker color based on incident type
          const markerColor = alert.isResolved 
            ? '#10b981' // Green for resolved
            : (incident.type === 'NEGLECT' || incident.type === 'OTHER') 
              ? '#f59e0b' // Amber for neglect/other
              : '#ef4444' // Red for most alerts
          
          // Create marker
          const marker = new google.maps.Marker({
            position: { lat: incident.latitude, lng: incident.longitude },
            map: currentMap,
            title: incident.location,
            // Add animation only if it's supported
            animation: google.maps.Animation?.DROP,
            icon: {
              path: google.maps.SymbolPath.CIRCLE,
              fillColor: markerColor,
              fillOpacity: 0.7,
              strokeWeight: 2,
              strokeColor: '#ffffff',
              scale: 8
            }
          })
          
          // Create info window with detailed information
          const infoWindow = new google.maps.InfoWindow({
            content: `
              <div style="max-width: 220px; padding: 8px;">
                <h3 style="margin: 0 0 8px; font-size: 14px; font-weight: bold;">${incident.location}</h3>
                <p style="margin: 0 0 5px; font-size: 12px; color: ${markerColor}; font-weight: 600;">
                  ${incident.type.replace('_', ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                </p>
                <p style="margin: 0 0 5px; font-size: 12px;">${incident.description}</p>
                <p style="margin: 0; font-size: 10px; color: #666;">
                  ${new Date(incident.createdAt).toLocaleString()}
                </p>
              </div>
            `
          })
          
          // Add click listener
          marker.addListener('click', () => {
            infoWindow.open(currentMap, marker)
          })
          
          newMarkers.push(marker)
        } catch (error) {
          console.error('Error creating marker:', error)
        }
      })
      
      setMarkers(newMarkers)
    } catch (error) {
      console.error('Error updating markers:', error)
    }
  }
  
  // Update markers when alerts change
  useEffect(() => {
    if (map) {
      updateMarkers(map)
    }
  }, [alerts, map])
  
  return (
    <div className="w-full h-full">
      {loading ? (
        <div className="flex justify-center items-center h-[400px]">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-500"></div>
          <span className="ml-2 text-muted-foreground">{t.loading}</span>
        </div>
      ) : (
        <GoogleMapsApiLoader 
          apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || ''} 
          onLoad={initializeMap}
          libraries={['places', 'marker']}
        >
          <div 
            ref={mapRef} 
            className="w-full h-[400px] rounded-md border overflow-hidden"
            style={{ background: '#f1f5f9' }}
          />
        </GoogleMapsApiLoader>
      )}
      
      {/* Show fallback when loading is complete but map isn't ready */}
      {!loading && !mapReady && (
        <div className="absolute inset-0 pointer-events-none">
          <div className="flex flex-col items-center justify-center h-full">
            <div className="flex items-center space-x-2 text-muted-foreground">
              {alerts.length > 0 ? (
                <>
                  <div className="space-y-4 p-4">
                    {alerts.map((alert) => {
                      const incident = alert.incident;
                      
                      // Determine the alert type icon and color
                      let IconComponent = AlertTriangle;
                      let textColorClass = 'text-red-600';
                      
                      if (alert.isResolved) {
                        IconComponent = CheckCircle;
                        textColorClass = 'text-green-600';
                      } else if (incident.type === 'NEGLECT' || incident.type === 'OTHER') {
                        IconComponent = Info;
                        textColorClass = 'text-amber-600';
                      }
                      
                      return (
                        <div key={alert.id} className="flex items-start gap-2">
                          <IconComponent className={`h-5 w-5 ${textColorClass} flex-shrink-0 mt-0.5`} />
                          <div>
                            <p className="text-sm font-medium">
                              {incident.type.replace('_', ' ').replace(/\b\w/g, (l: string) => l.toUpperCase())}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {incident.location}
                            </p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </>
              ) : (
                <p>{t.noAlerts}</p>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
